@namespace NexusUserTest.Shared.NexusBlazor
@attribute [CascadingTypeParameter(nameof(TItem))]
@typeparam TItem

<div class="table-container">
    @if (Columns != null)
    {
        <CascadingValue Value=this>
            @Columns
        </CascadingValue>
    }

    @ToolTemplate

    <table class="table table-bordered @CssClass" style="@CssStyle">
        <thead>
            <tr>
                @if (IsExpnadMode)
                {
                    <th style="width:10px;"></th>
                }
                @foreach (var item in _items)
                {
                    <th scope="col" class="@item.CssClass" style="@item.CssStyle">
                        @if (item.HeaderTemplate is not null)
                        {
                            @item.HeaderTemplate
                        }
                        else if (!AllowSorting || !item.Sortable)
                        {
                            @item.Title
                        }
                        else
                        {
                            <span @onclick="() => SortBy(item.FieldName!)"
                                  style="cursor:@(item.Sortable ? "pointer" : "default")">
                                @item.Title
                                @if (_state.SortColumn == item.FieldName)
                                {
                                    <span>@(_state.SortAscending ? "▲" : "▼")</span>
                                }
                            </span>
                        }
                    </th>
                }
            </tr>
            @if (AllowFiltering)
            {
                <tr>
                    @if (IsExpnadMode)
                    {
                        <th style="width:10px;"></th>
                    }
                    @foreach (var item in _items)
                    {
                        <th>
                            @if (item.Filterable && !string.IsNullOrEmpty(item.FieldName))
                            {
                                <input class="form-control form-control-sm"
                                       @oninput="e => SetFilter(item.FieldName, e.Value?.ToString())"
                                       placeholder="Filter..." />
                            }
                        </th>
                    }
                </tr>
            }
        </thead>
        <tbody>
            @if (_state.View != null)
            {
                @if (!ShowEmptyMessage || _state.View.Count > 0)
                {
                    if (_items.Count > 0)
                    {
                        @foreach (var item in _state.View)
                        {
                            <tr @key="item" @onclick="() => SelectRow(item)" @ondblclick="() => OnRowDblClick(item)" class="@(SelectedRows.Contains(item) ? "selected-row" : "")">
                                <th @onclick="@(() => OnExpandRow(item))" @onclick:stopPropagation="true"
                                    style="display:@(ExpandMode != NexusTableGridExpandMode.None ? "" : "none");">
                                    <i class="bi @(ExpandedRows.Contains(item) ? "bi-chevron-down" : "bi-chevron-right")"></i>
                                </th>
                                @foreach (var col in Items)
                                {
                                    <td>
                                        @if (col.CellTemplate is not null)
                                        {
                                            @col.CellTemplate(item)
                                        }
                                        else if (EditedItems.Contains(item) && col.EditTemplate is not null)
                                        {
                                            @col.EditTemplate(item)
                                        }
                                        else if (col.Property is not null)
                                        {
                                            @col.Field(item)
                                        }
                                    </td>
                                }
                            </tr>
                            @if (ExpandMode != NexusTableGridExpandMode.None)
                            {
                                <tr class="expand-row" style="display:@(ExpandedRows.Contains(item) ? "" : "none");">
                                    <td colspan="@ColSpan">
                                        <CascadingValue Value="item">
                                            @ExpandRow(item)
                                        </CascadingValue>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr class="emptymessage-row">
                            <td colspan="@ColSpan">
                                <h3>@EmptyMessage</h3>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="emptymessage-row">
                        <td colspan="@ColSpan">
                            <h3>@EmptyMessage</h3>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>